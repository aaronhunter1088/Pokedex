<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.skvllprodvctions</groupId>
        <artifactId>parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <artifactId>Pokedex</artifactId>
    <version>0.0.5-SNAPSHOT</version>
    <packaging>war</packaging>
    <name>Pokédex</name>
    <description>Springboot Pokédex App</description>

    <properties>
        <finalName>${project.artifactId}-${project.version}</finalName>
        <outputDirectory>${basedir}/dist</outputDirectory>
        <start-class>com.pokedex.app.PokedexApplication</start-class>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- spring boot -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- spring boot starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-to-slf4j</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- spring boot starter web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- spring boot starter devtools -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!-- spring boot properties migrator: useful when upgrading between major SB versions
             scans config files, logs warnings, suggests new names. remove after migration is complete -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-properties-migrator</artifactId>
            <version>${spring.boot.version}</version>
            <scope>runtime</scope>
        </dependency>
        <!-- pokeapi-reactor -->
        <!-- log4j2 -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.7</version>
        </dependency>

        <dependency>
            <groupId>skaro.pokeapi</groupId>
            <artifactId>pokeapi-reactor</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-to-slf4j</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api -->
        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
            <version>4.0.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->
        <dependency>
            <groupId>com.googlecode.json-simple</groupId>
            <artifactId>json-simple</artifactId>
            <version>1.1.1</version>
        </dependency>
        <!-- tomcat embedded jasper: required for JSP support -->
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
            <version>10.1.16</version>
            <scope>provided</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/jakarta.servlet.jsp.jstl/jakarta.servlet.jsp.jstl-api -->
        <dependency>
            <groupId>jakarta.servlet.jsp.jstl</groupId>
            <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
            <version>3.0.2</version>
        </dependency>
        <!-- jsp jstl: required if your Spring Boot application uses JSPs with JSTL tags -->
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>jakarta.servlet.jsp.jstl</artifactId>
            <version>3.0.1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.taglibs/taglibs-standard-jstlel -->
        <dependency>
            <groupId>org.apache.taglibs</groupId>
            <artifactId>taglibs-standard-jstlel</artifactId>
            <version>1.2.5</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.taglibs/taglibs-standard-impl -->
        <dependency>
            <groupId>org.apache.taglibs</groupId>
            <artifactId>taglibs-standard-impl</artifactId>
            <version>1.2.5</version>
            <scope>runtime</scope>
        </dependency>
    </dependencies>

    <build>
        <sourceDirectory>src/main/java</sourceDirectory>
        <testSourceDirectory>src/test/java</testSourceDirectory>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/**</include>
                    <!--<include>**/sounds/*.mp3</include>-->
                </includes>
            </resource>
            <resource>
                <directory>src/main/webapp</directory>
                <includes>
                    <include>**/**</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <!-- Easiest way to create a runnable SB jar
                 Creates a self-contained jar at mvn package
                 Will create 'Pokedex-<version>.war'
                 Copy the war into dist when it's ready -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>${start-class}</mainClass>
                    <executable>true</executable>
                </configuration>
            </plugin>

            <!-- Compile -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                    <release>${java.version}</release>
                    <compilerArgs>
                        <arg>-verbose</arg>
                        <arg>-Xlint:all,-options,-path</arg>
                    </compilerArgs>
                    <!-- for surefire plugin -->
                </configuration>
                <executions>
                    <execution>
                        <id>default-compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>default-testCompile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Test-compile -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
            <!-- Generate resources -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>write-project-properties</goal>
                        </goals>
                        <configuration>
                            <outputFile>${basedir}/src/main/resources/pom.properties</outputFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Binds to Package phase, but will not run... -->
            <!-- When creating a jar, update MANIFEST.MF file and place JAR in specified outputDirectory
                 Run Command: mvn install -DskipTests -DskipITs -->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-jar-plugin</artifactId>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>default-jar</id>-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>jar</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            <classifier>plain</classifier>-->
<!--                        </configuration>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--                <configuration>-->
<!--                    <outputDirectory>${outputDirectory}</outputDirectory>-->
<!--                    <archive>-->
<!--                        <index>true</index>-->
<!--                        <manifest>-->
<!--                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>-->
<!--                            <addClasspath>true</addClasspath>-->
<!--                            <mainClass>${start-class}</mainClass>-->
<!--                        </manifest>-->
<!--                        <manifestEntries>-->
<!--                            <Implementation-Version>${project.version}</Implementation-Version>-->
<!--                            <Creation-Time-Format>yyyy-MM-dd HH:mm:ss</Creation-Time-Format>-->
<!--                            &lt;!&ndash;suppress UnresolvedMavenProperty &ndash;&gt;-->
<!--                            <Creation-Time>${build.time}</Creation-Time>-->
<!--                            <mainClass>${start-class}</mainClass>-->
<!--                        </manifestEntries>-->
<!--                    </archive>-->
<!--                    <includes>-->
<!--                        <include>**/*</include>-->
<!--                    </includes>-->
<!--                </configuration>-->
<!--            </plugin>-->

            <!-- War plugin -->
<!--            <plugin>-->
<!--                <artifactId>maven-war-plugin</artifactId>-->
<!--                <version>3.4.0</version>-->
<!--                <configuration>-->
<!--                    <attachClasses>true</attachClasses>-->
<!--                    <webXml>${basedir}/src/main/webapp/WEB-INF/web.xml</webXml>-->
<!--                    <warSourceDirectory>src/main/webapp</warSourceDirectory>-->
<!--                    <outputDirectory>${outputDirectory}</outputDirectory>-->
<!--                </configuration>-->
<!--            </plugin>-->

            <!-- Assembly:Single creates runnable jar with dependencies
                 Run Command: mvn clean package -Dmaven.test.skip=true -->
<!--            <plugin>-->

<!--                &lt;!&ndash; don't need group id since org.apache.maven.plugins is assumed &ndash;&gt;-->
<!--                <artifactId>maven-assembly-plugin</artifactId>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>build-pokedex</id>-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>single</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            <descriptorRefs>-->
<!--                                <descriptorRef>jar-with-dependencies</descriptorRef>-->
<!--                            </descriptorRefs>-->
<!--                            <appendAssemblyId>true</appendAssemblyId> &lt;!&ndash; If false, jar-with-dependencies is not appended to jar name &ndash;&gt;-->
<!--                            &lt;!&ndash; archive required to create executable jar &ndash;&gt;-->
<!--                            <archive>-->
<!--                                <index>true</index>-->
<!--                                <manifest>-->
<!--                                    <addDefaultImplementationEntries>true</addDefaultImplementationEntries>-->
<!--                                    <addClasspath>true</addClasspath>-->
<!--                                    <mainClass>${start-class}</mainClass>-->
<!--                                </manifest>-->
<!--                                <manifestEntries>-->
<!--                                    <Creation-Time>${maven.build.timestamp}</Creation-Time>-->
<!--                                    <Creation-Time-Format>yyyy-MM-dd HH:mm:ss</Creation-Time-Format>-->
<!--                                </manifestEntries>-->
<!--                            </archive>-->
<!--                            <finalName>${finalName}</finalName>-->
<!--                            <outputDirectory>${outputDirectory}</outputDirectory>-->
<!--                        </configuration>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
        </plugins>
    </build>
</project>
